{"version":3,"file":"utils.js","mappings":";;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;ACNA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA;AACO;AACP,+BAA+B,uBAAuB,WAAW;AACjE;AACA;AACO;AACP;AACA;AACA,KAAK;AACL;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,OAAO;AACtD,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,2GAA2G;AAClJ,mCAAmC,2GAA2G;AAC9I,+CAA+C,2GAA2G;AAC1J,kDAAkD,2GAA2G;AAC7J,2CAA2C;AAC3C,iBAAiB;AACjB,sCAAsC,OAAO,qBAAqB,KAAK;AACvE;AACA;AACA;AACA,iCAAiC,mCAAmC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,4EAA4E;AACtI,gEAAgE,gBAAgB;AAChF,kEAAkE;AAClE,yCAAyC;AACzC;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,0DAA0D,4EAA4E;AACtI,gEAAgE,gBAAgB;AAChF,kEAAkE;AAClE,yCAAyC;AACzC;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,0DAA0D,4EAA4E;AACtI,gEAAgE,gBAAgB;AAChF,kEAAkE;AAClE,yCAAyC;AACzC;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,0DAA0D,4EAA4E;AACtI,gEAAgE,gBAAgB;AAChF,kEAAkE;AAClE,yCAAyC;AACzC;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,0DAA0D,4EAA4E;AACtI,gEAAgE,gBAAgB;AAChF,kEAAkE;AAClE,yCAAyC;AACzC;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,OAAO;AAC9D,yBAAyB;AACzB;AACA,qBAAqB;AACrB;AACA,+DAA+D,gBAAgB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL","sources":["webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./src/utils/utils.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n// Utility function to save the API key to Chrome storage\nexport function saveApiKey(apiKey) {\n    chrome.storage.local.set({ chatgptApiKey: apiKey }, () => { });\n}\n// Utility function to get the API key from Chrome storage\nexport function getApiKey(callback) {\n    chrome.storage.local.get(['chatgptApiKey'], (result) => {\n        callback(result.chatgptApiKey || null);\n    });\n}\n// Utility function to hide an element by selector\nexport function hideElement(selector) {\n    const element = document.querySelector(selector);\n    if (element) {\n        element.classList.add('hidden');\n    }\n}\n// Utility function to show an element by selector\nexport function showElement(selector) {\n    const element = document.querySelector(selector);\n    if (element) {\n        element.classList.remove('hidden');\n    }\n}\n// Utility function to get the domain name from a URL\nexport function getDomainNameFromUrl(url) {\n    const parts = url.hostname.split('.');\n    if (parts.length > 2) {\n        if (parts[parts.length - 2] === 'co' || parts[parts.length - 2] === 'com') {\n            return parts[parts.length - 3];\n        }\n        else {\n            return parts[parts.length - 2];\n        }\n    }\n    else if (parts.length === 2) {\n        return parts[0];\n    }\n    else {\n        return url.hostname;\n    }\n}\nexport function validateApiKey(apiKey) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const openaiEndpoint = 'https://api.openai.com/v1/models';\n        try {\n            const response = yield fetch(openaiEndpoint, {\n                method: 'GET',\n                headers: {\n                    'Authorization': `Bearer ${apiKey}`,\n                },\n            });\n            return response.status === 200;\n        }\n        catch (error) {\n            return false;\n        }\n    });\n}\n// Define the establishedSources variable\nconst establishedSources = [\n    'ad',\n    'apnews',\n    'bbc',\n    'cnn',\n    'fd',\n    'gelderlander',\n    'nos',\n    'nrc',\n    'nu',\n    'parool',\n    'telegraaf',\n    'trouw',\n    'volkskrant'\n];\n// Utility function to provide an additional sentence explaining the context of the analysis\nexport function getContextSentence(domain) {\n    if (establishedSources.includes(domain)) {\n        return \"contextSentence\";\n    }\n    ;\n    return \"\";\n}\nexport function analyseWithLLM(html) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return new Promise((resolve, reject) => {\n            getApiKey((apiKey) => __awaiter(this, void 0, void 0, function* () {\n                if (!apiKey) {\n                    reject(new Error(chrome.i18n.getMessage('apiKeyNotSet')));\n                    return;\n                }\n                const prompt = `You are a news article classifier assessing whether a news article is fake news or not.\n\n                You should evaluate each news article on five content features:\n                emotionsFeature: Greater use of emotive and affective language. Especially negative emotions typically more present. In news, content contains heavy emotional appeal to readers, provoking fear, anger, outrage.\n                biasFeature: (Hyper-)partisan bias, often with a right-leaning ideological orientation. Negative references to left-leaning, progressive political actors or issues, positive references to (populist) right leaning political actors or issues.\n                informalLanguageFeature: More use of informal words and informal language (slang, swear). Higher likelihood of hate speech and incivility.\n                scientificConsensusFeature: Evidence and claims made go against conventional facts or scientific consensus.\n                expertMisuseFeature: Irrelevant or non-legitimate experts are cited who have no knowledge of the topic.\n\n                Give an assessment for each feature expressing to which extent a feature applies, use the following labels:\n                - notPresent\n                - somewhatPresent\n                - stronglyPresent\n                return the results as a pure JSON object listing each content feature the associated assesment and a brief explanation of the assesment in both dutch and english. The JSON object should have the following structure:\n                {\n                  \"emotionsFeature\": { \"assessment\": \"label\", \"dutchExplanation\": \"brief explanation\", \"englishExplanation\": \"brief explanation\" },\n                  \"biasFeature\": { \"assessment\": \"label\", \"dutchExplanation\": \"brief explanation\", \"englishExplanation\": \"brief explanation\" },\n                  \"informalLanguageFeature\": { \"assessment\": \"label\", \"dutchExplanation\": \"brief explanation\", \"englishExplanation\": \"brief explanation\" },\n                  \"scientificConsensusFeature\": { \"assessment\": \"label\", \"dutchExplanation\": \"brief explanation\", \"englishExplanation\": \"brief explanation\" },\n                  \"expertMisuseFeature\": { \"assessment\": \"label\", \"dutchExplanation\": \"brief explanation\", \"englishExplanation\": \"brief explanation\" }\n                }`;\n                const fullPrompt = `${prompt}\\n\\nHTML Content:\\n${html}`;\n                const openaiEndpoint = 'https://api.openai.com/v1/chat/completions';\n                const requestBody = {\n                    model: 'gpt-4o-mini',\n                    messages: [{ role: 'user', content: fullPrompt }],\n                    top_p: 0.01,\n                    seed: 1,\n                    response_format: {\n                        type: 'json_schema',\n                        json_schema: {\n                            name: 'news_article_analysis',\n                            schema: {\n                                type: 'object',\n                                properties: {\n                                    \"emotionsFeature\": {\n                                        type: 'object',\n                                        properties: {\n                                            assessment: { type: 'string', enum: ['notPresent', 'somewhatPresent', 'stronglyPresent'] },\n                                            dutchExplanation: { type: 'string' },\n                                            englishExplanation: { type: 'string' }\n                                        },\n                                        required: ['assessment', 'dutchExplanation', 'englishExplanation'],\n                                        additionalProperties: false\n                                    },\n                                    \"biasFeature\": {\n                                        type: 'object',\n                                        properties: {\n                                            assessment: { type: 'string', enum: ['notPresent', 'somewhatPresent', 'stronglyPresent'] },\n                                            dutchExplanation: { type: 'string' },\n                                            englishExplanation: { type: 'string' }\n                                        },\n                                        required: ['assessment', 'dutchExplanation', 'englishExplanation'],\n                                        additionalProperties: false\n                                    },\n                                    \"informalLanguageFeature\": {\n                                        type: 'object',\n                                        properties: {\n                                            assessment: { type: 'string', enum: ['notPresent', 'somewhatPresent', 'stronglyPresent'] },\n                                            dutchExplanation: { type: 'string' },\n                                            englishExplanation: { type: 'string' }\n                                        },\n                                        required: ['assessment', 'dutchExplanation', 'englishExplanation'],\n                                        additionalProperties: false\n                                    },\n                                    \"scientificConsensusFeature\": {\n                                        type: 'object',\n                                        properties: {\n                                            assessment: { type: 'string', enum: ['notPresent', 'somewhatPresent', 'stronglyPresent'] },\n                                            dutchExplanation: { type: 'string' },\n                                            englishExplanation: { type: 'string' }\n                                        },\n                                        required: ['assessment', 'dutchExplanation', 'englishExplanation'],\n                                        additionalProperties: false\n                                    },\n                                    \"expertMisuseFeature\": {\n                                        type: 'object',\n                                        properties: {\n                                            assessment: { type: 'string', enum: ['notPresent', 'somewhatPresent', 'stronglyPresent'] },\n                                            dutchExplanation: { type: 'string' },\n                                            englishExplanation: { type: 'string' }\n                                        },\n                                        required: ['assessment', 'dutchExplanation', 'englishExplanation'],\n                                        additionalProperties: false\n                                    }\n                                },\n                                required: [\n                                    \"emotionsFeature\",\n                                    \"biasFeature\",\n                                    \"informalLanguageFeature\",\n                                    \"scientificConsensusFeature\",\n                                    \"expertMisuseFeature\"\n                                ],\n                                additionalProperties: false\n                            },\n                            strict: true\n                        }\n                    }\n                };\n                try {\n                    const response = yield fetch(openaiEndpoint, {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'Authorization': `Bearer ${apiKey}`,\n                        },\n                        body: JSON.stringify(requestBody),\n                    });\n                    if (!response.ok) {\n                        throw new Error(`HTTP error! status: ${response.status}`);\n                    }\n                    const data = yield response.json();\n                    resolve({\n                        content: data.choices[0].message.content,\n                        inputTokens: data.usage.prompt_tokens,\n                        outputTokens: data.usage.completion_tokens\n                    });\n                }\n                catch (error) {\n                    reject(new Error(chrome.i18n.getMessage('analysisError')));\n                }\n            }));\n        });\n    });\n}\n"],"names":[],"sourceRoot":""}